---
#- name: "Gather the package facts"
#  ansible.builtin.package_facts:
#    manager: auto
#  when: ansible_facts.packages is not defined

- name: "Create software directory under root homedir, if it does not exist"
  ansible.builtin.file:
    path: "/root/software/java/"
    state: directory

- name: "Check if installer package already exist"
  ansible.builtin.stat:
    path: "/root/software/java/{{ package_name }}"
  register: package

- name: "Download installer package from local repository"
  ansible.builtin.get_url:
    url: "{{ software_url }}/{{ package_name }}"
    dest: "/root/software/java/"
    validate_certs: no
    mode: 0774
  when: package.stat.exists != True

- name: "Get installed version of existing Java Development Kit"
  ansible.builtin.shell: java --version | head -n1 | awk '{ print $2 }'
  ignore_errors: true
  register: installed_version

- name: "Set Facts about existing installation"
  ansible.builtin.set_fact:
    #installed_version: "{{ ansible_facts.packages['jdk-11*'][0].version }}"
    installed_version: "{{ installed_version.stdout }}"
    uninstall: true
  when: installed_version.stdout|length != 0

- name: "Install package (RHEL - yum)"
  ansible.builtin.yum:
    name: "/root/software/java/{{ package_name }}"
    state: present
    cacheonly: True
    disable_gpg_check: True
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] <= '7'
    - (installed_version != java_version) or (installed_version|length == 0)

- name: "Install package (RHEL - dnf)"
  ansible.builtin.dnf:
    name: "/root/software/java/{{ package_name }}"
    state: present
    cacheonly: True
    disable_gpg_check: True
  when:
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] >= '8'
    - (installed_version != java_version) or (installed_version is not defined)

- name: "Install package (Debian)"
  ansible.builtin.apt:
    deb: "/root/software/java/{{ package_name }}"
    state: present
  when:
    - ansible_facts['os_family'] == 'Debian'
    - (installed_version != java_version) or (installed_version|length == 0)

#- name: "Update alternatives to use newly installed Oracle Java Development Kit (JDK)"
#  community.general.alternatives:
#    name: java
#    path: "/usr/java/jdk-{{ java_version }}/bin/java"
#    link: /usr/bin/java
#    state: auto

- name: "Add JAVA_HOME to default user profile"
  ansible.builtin.template:
    src: java.j2
    dest: /etc/profile.d/java.sh
    owner: root
    group: root
    mode: 0644

- name: "Get previously version of existing Java Development Kit"
  ansible.builtin.shell: rpm -qa | grep "jdk-{{ installed_version }}"
  ignore_errors: true
  register: uninstall_package
  #when: installed_version|length != 0
  when: uninstall

- name: "Set Facts about previously version of existing Java Development Kit"
  ansible.builtin.set_fact:
    uninstall_package: "{{ uninstall_package.stdout }}"
  when: uninstall_package|length > 0

- name: "Remove previously installed package (RHEL - yum)"
  ansible.builtin.yum:
    name: "{{ uninstall_package }}"
    state: absent
    cacheonly: True
    disable_gpg_check: True
  when:
    - uninstall
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] <= '7'

- name: "Remove previously installed package (RHEL - dnf)"
  ansible.builtin.dnf:
    name: "{{ uninstall_package }}"
    state: absent
    cacheonly: True
    disable_gpg_check: True
  when:
    - uninstall
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version'] >= '8'

- name: "Remove previously installed package (Debian)"
  ansible.builtin.apt:
    deb: "{{ uninstall_package }}"
    state: absent
  when:
    - uninstall
    - ansible_facts['os_family'] == 'Debian'
